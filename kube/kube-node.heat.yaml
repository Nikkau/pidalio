heat_template_version: 2013-05-23

parameters:
  token:
    label: token
    type: string
  mastercount:
    label: mastercount
    type: number
  nodecount:
    label: nodecount
    type: number
  subnet:
    label: subnet
    type: string
  os_username:
    label: os_username
    type: string
  os_password:
    label: os_password
    type: string
  os_tenant:
    label: os_tenant
    type: string
  os_tenant_id:
    label: os_tenant_id
    type: string
  os_auth:
    label: os_auth
    type: string
  os_region:
    label: os_region
    type: string
  network:
    label: network
    type: string
  security_group:
    label: security_group
    type: string
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string
  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    label: Cloud DNS
    type: string
  flavor_name:
    label: Instance Type (Flavor)
    description: Flavor to use for the deployed instance
    type: string

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - { get_param: security_group }

  node:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: CoreOS Stable 1010.6
      flavor: { get_param: flavor_name }
      user_data_format: RAW
      networks:
        - port: { get_resource: port }
      user_data:
        str_replace:
          params:
            $private_ipv4$: { get_attr: [ port, fixed_ips, 0, ip_address ] }
            $public_ipv4$: { get_attr: [ floating_ip, floating_ip_address] }
            $domain$: { get_param: domain }
            $os_username$: { get_param: os_username}
            $os_password$: { get_param: os_password}
            $os_tenant$: { get_param: os_tenant }
            $os_auth$: { get_param: os_auth }
            $os_region$: fr1
            $os_project_id$: { get_param: 'OS::project_id' }
            $node_count$: { get_param: nodecount }
            $master_count$: { get_param: mastercount }
            $subnet$: { get_param: subnet }
            $token$: { get_param: token }
          template: |
            #cloud-config
            write_files:
              - path: /opt/weave-init.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  echo WEAVE_PEERS=\"10.0.1.10 10.0.1.11 10.0.1.12\" > /etc/weave.env
                  echo WEAVEPROXY_ARGS=\"--rewrite-inspect\" >> /etc/weave.env
              - path: /opt/pidalio-init.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  echo NODE_FQDN=$(hostname) >> /etc/pidalio.env
                  echo NODE_ID=$(curl -s http://169.254.169.254/openstack/latest/meta_data.json | jq -r .uuid) >> /etc/pidalio.env
                  rm -Rf /opt/pidalio /opt/kube /opt/bin/kubelet /opt/bin/kubectl
                  mkdir -p /etc/kubernetes/descriptors /etc/kubernetes/manifests /etc/kubernetes/ssl
                  git clone https://github.com/cedbossneo/pidalio.git /opt/pidalio
                  ln -s /opt/pidalio/kube/kubelet /opt/kube
                  curl -o /opt/bin/kubelet http://storage.googleapis.com/kubernetes-release/release/v1.3.5/bin/linux/amd64/kubelet
                  curl -o /opt/bin/kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.5/bin/linux/amd64/kubectl
                  chmod +x /opt/bin/kubelet /opt/bin/kubectl
              - path: /opt/pidalio-units.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  /usr/bin/fleetctl start /opt/pidalio.service
                  for i in $(seq 1 $master_count$)
                  do
                    /usr/bin/fleetctl start /opt/pidalio-master@$i.service
                  done
                  for i in $(seq 1 $node_count$)
                  do
                    /usr/bin/fleetctl start /opt/pidalio-node@$i.service
                  done
              - path: /etc/pidalio.env
                permissions: 0700
                owner: "root:root"
                content: |
                  PIDALIO_TOKEN=$token$
                  NODE_IP=$private_ipv4$
                  DOMAIN=$domain$
                  OS_AUTH_URL=$os_auth$
                  OS_PASSWORD=$os_password$
                  OS_USERNAME=$os_username$
                  OS_TENANT_NAME=$os_tenant$
                  OS_PROJECT_ID=$os_project_id$
                  OS_REGION=$os_region$
                  OS_SUBNET=$subnet$
              - path: /opt/pidalio.service
                permissions: 0700
                owner: "root:root"
                content: |
                  [Unit]
                  Description=Pidalio Service
                  After=weave-network.target
                  After=etcd2.service
                  Requires=weave-network.target
                  Requires=etcd2.service
                  [Service]
                  Restart=always
                  RestartSec=10
                  EnvironmentFile=/etc/environment
                  Environment=DOCKER_HOST=unix:///var/run/weave/weave.sock
                  ExecStartPre=/usr/bin/docker pull cedbossneo/pidalio
                  ExecStart=/usr/bin/docker run --name=pidalio \
                    -e TOKEN=$token$ \
                    -e ETCD_URI=http://$private_ipv4$:2379 \
                    -e OS_REGION_NAME=$os_region$ \
                    cedbossneo/pidalio
                  ExecStop=/usr/bin/docker rm -f pidalio
              - path: /opt/pidalio-master@.service
                permissions: 0700
                owner: "root:root"
                content: |
                  [Unit]
                  Description=Pidalio Master Service
                  After=weave-network.target etcd2.service pidalio-node.service
                  Requires=weave-network.target etcd2.service
                  [Service]
                  Restart=always
                  RestartSec=10
                  EnvironmentFile=/etc/environment
                  EnvironmentFile=/etc/pidalio.env
                  Environment=MASTER=true
                  ExecStartPre=/opt/kube/scripts/make-cloud-config.sh
                  ExecStartPre=/opt/kube/scripts/retrieve-certificates.sh
                  ExecStartPre=/opt/kube/scripts/prepare-yaml.sh
                  ExecStart=/opt/kube/scripts/launch-kubelet.sh
                  ExecStop=/bin/bash -c '/usr/bin/docker rm -f $(/usr/bin/docker ps -q -a -f name=kube-)'
                  [X-Fleet]
                  Conflicts=pidalio-master@*.service
                  Conflicts=pidalio-node@*.service
              - path: /opt/pidalio-node@.service
                permissions: 0700
                owner: "root:root"
                content: |
                  [Unit]
                  Description=Pidalio Node Service
                  After=pidalio-launch.service
                  After=etcd2.service
                  Requires=pidalio-launch.service
                  Requires=etcd2.service
                  [Service]
                  Restart=always
                  RestartSec=10
                  EnvironmentFile=/etc/environment
                  EnvironmentFile=/etc/pidalio.env
                  Environment=MASTER=false
                  ExecStartPre=/opt/kube/scripts/make-cloud-config.sh
                  ExecStartPre=/opt/kube/scripts/retrieve-certificates.sh
                  ExecStartPre=/opt/kube/scripts/prepare-yaml.sh
                  ExecStart=/opt/kube/scripts/launch-kubelet.sh
                  ExecStop=/bin/bash -c '/usr/bin/docker rm -f $(/usr/bin/docker ps -q -a -f name=kube-)'
                  [X-Fleet]
                  Conflicts=pidalio-master@*.service
                  Conflicts=pidalio-node@*.service
            coreos:
              fleet:
                  public-ip: "$private_ipv4$"
                  metadata: "region=vagrant"
              etcd2:
                name: $private_ipv4$
                advertise-client-urls: http://$private_ipv4$:2379
                initial-advertise-peer-urls: http://$private_ipv4$:2380
                initial-cluster: "10.0.1.10=http://10.0.1.10:2380,10.0.1.11=http://10.0.1.11:2380,10.0.1.12=http://10.0.1.12:2380"
                listen-client-urls: http://0.0.0.0:2379
                listen-peer-urls: http://$private_ipv4$:2380
              units:
                - name: etcd2.service
                  command: start
                - name: fleet.service
                  command: start
                - name: weave-network.target
                  enable: true
                  content: |
                    [Unit]
                    Description=Weave Network Setup Complete
                    Documentation=man:systemd.special(7)
                    RefuseManualStart=no
                    [Install]
                    WantedBy=multi-user.target
                - name: weave-init.service
                  command: start
                  content: |
                    [Unit]
                    Before=install-weave.service
                    Description=Install Weave
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=0
                    ExecStart=/opt/weave-init.sh
                - name: 10-weave.network
                  runtime: false
                  content: |
                    [Match]
                    Type=bridge
                    Name=weave*
                    [Network]
                - name: install-weave.service
                  enable: true
                  content: |
                    [Unit]
                    After=docker.service weave-init.service
                    Requires=docker.service weave-init.service
                    Before=weave.service
                    Description=Install Weave
                    [Service]
                    EnvironmentFile=-/etc/weave.env
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=0
                    ExecStartPre=/bin/mkdir -p /opt/bin/
                    ExecStartPre=/usr/bin/curl \
                      --silent \
                      --location \
                      git.io/weave \
                      --output /opt/bin/weave
                    ExecStartPre=/usr/bin/chmod +x /opt/bin/weave
                    ExecStart=/opt/bin/weave setup
                    [Install]
                    WantedBy=weave-network.target
                    WantedBy=weave.service
                - name: weaveproxy.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=docker.service
                    Description=Weave proxy for Docker API
                    Requires=docker.service
                    Requires=install-weave.service
                    [Service]
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave launch-proxy $WEAVEPROXY_ARGS
                    ExecStart=/usr/bin/docker attach weaveproxy
                    Restart=on-failure
                    ExecStop=/opt/bin/weave stop-proxy
                    [Install]
                    WantedBy=weave-network.target
                - name: weave.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=docker.service
                    Description=Weave Network Router
                    Documentation=http://weave.works/docs
                    Requires=docker.service
                    Requires=install-weave.service
                    [Service]
                    TimeoutStartSec=0
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave launch-router $WEAVE_PEERS
                    ExecStart=/usr/bin/docker attach weave
                    Restart=on-failure
                    ExecStop=/opt/bin/weave stop-router
                    [Install]
                    WantedBy=weave-network.target
                - name: weave-expose.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=weave.service
                    After=docker.service
                    Documentation=http://weave.works/docs
                    Requires=docker.service
                    Requires=install-weave.service
                    Requires=weave.service
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=0
                    EnvironmentFile=-/etc/weave.env
                    ExecStart=/opt/bin/weave expose
                    ExecStop=/opt/bin/weave hide
                    [Install]
                    WantedBy=weave-network.target
                - name: pidalio-init.service
                  command: start
                  content: |
                    [Unit]
                    Description=Pidalio Config Service
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=0
                    ExecStart=/opt/pidalio-init.sh
                - name: pidalio-launch.service
                  command: start
                  content: |
                    [Unit]
                    After=weave-network.target fleet.service pidalio-init.service
                    Requires=weave-network.target fleet.service pidalio-init.service
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=0
                    EnvironmentFile=/etc/environment
                    ExecStart=/opt/pidalio-units.sh
  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: node }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

outputs:
  public_ip:
    value: {get_attr: [floating_ip, floating_ip_address]}
